// Generated by CoffeeScript 1.10.0
(function() {
  var Avatar, COLLECTION_NAME;

  COLLECTION_NAME = 'avatars';

  Avatar = (function() {
    function Avatar() {
      this.uuid = null;
      this.username = null;
      this.displayName = null;
      this.born = null;
      this.payinfo = {
        onFile: null,
        used: null
      };
    }

    Avatar._toDatabase = function() {
      return {
        _id: this.uuid,
        username: this.username,
        displayName: this.displayName,
        born: this.born,
        paymentInfo: {
          onFile: this.payinfo.onFile,
          used: this.payinfo.used
        }
      };
    };

    Avatar._isSameAsDatabase = function(record) {
      var ref, ref1;
      if (record == null) {
        return false;
      }
      if (record._id !== this.uuid) {
        return false;
      }
      if (record.username !== this.username) {
        return false;
      }
      if (record.displayName !== this.displayName) {
        return false;
      }
      if (((ref = record.paymentInfo) != null ? ref.onFile : void 0) !== this.paymentInfo.onFile) {
        return false;
      }
      if (((ref1 = record.paymentInfo) != null ? ref1.used : void 0) !== this.paymentInfo.used) {
        return false;
      }
      return true;
    };

    Avatar.load = function(connection, uuid) {
      var group, search, self;
      self = this;
      connection.open();
      group = connection.collection(COLLECTION_NAME);
      search = {
        _id: uuid
      };
      return group.findOne(search).then(function(doc) {
        var ref, ref1;
        if (doc == null) {
          console.log("Avatar.load() search failed: ", search);
          connection.close();
          return;
        }
        this.uuid = doc._id;
        this.username = doc.username;
        this.displayName = doc.displayName;
        this.paymentInfo = {
          onFile: (ref = doc.paymentInfo) != null ? ref.onFile : void 0,
          used: (ref1 = doc.paymentInfo) != null ? ref1.used : void 0
        };
        return connection.close();
      })["catch"](function(err) {
        console.log("Search for avatar ", search, " failed: ", err);
        return connection.close();
      });
    };

    Avatar.save = function(connection) {
      var group, search, self;
      self = this;
      connection.open();
      group = connection.collection(COLLECTION_NAME);
      search = {
        _id: this.uuid
      };
      return group.findOne(search).then(function(doc) {
        if (doc == null) {
          return group.insertOne(self._toDatabase(), function(err) {
            if (err != null) {
              console.log("Avatar.save() insert failed: ", err, self);
              return connection.close();
            }
          });
        } else {
          if (self._isSameAsDatabase(doc)) {
            connection.close();
            return;
          }
          return group.update(self, function(err) {
            if (err != null) {
              console.log("Avatar.save() update failed: ", err, self);
            }
            return connection.close();
          });
        }
      })["catch"](function(err) {
        console.log("Search for avatar ", search, " failed: ", err);
        return connection.close();
      });
    };

    return Avatar;

  })();

  module.exports.Avatar = Avatar;

}).call(this);

//# sourceMappingURL=avatar.js.map
